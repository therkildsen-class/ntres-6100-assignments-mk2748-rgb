---
title: "assignment_6"
format: gfm
editor: visual
execute: 
  echo: true
  message: false
  warning: false
---

```{r}

library(tidyverse) #install.packages(tidyverse)

library(knitr) #install.packages(knitr)

```

# Exercise 1.1 Create the following tibble manually, first using tribble() and then using tibble(). Print both results.

```{r}
tribble_example <- tribble(
  ~a, ~b, ~c,
   1,  2.1, "apple",
   2,  3.2, "orange")

tribble_example


tibble_example <- tibble(
  a = c(1, 2),
  b = c(2.1, 3.2),
  c = c("apple", "orange"))

tibble_example

```

## 1.2 Import https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt into R. Change the column names into “Name”, “Weight”, “Price”.

```{r}
url <- "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt"


data2 <- read.csv(url, header = FALSE, stringsAsFactors = FALSE)

colnames(data2) <- c("Name", "Weight", "Price")

data2

```

## 1.3 Import https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt into R. Watch out for the first few lines, missing values, separators, quotation marks, and deliminaters.

```{r}
url <- "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt"

data3 <- read.table(url, 
                    header = TRUE, 
                    sep = ",", 
                    quote = "\"",
                    na.strings = c("", "NA"),
                    strip.white = TRUE,
                    comment.char = "",
                    stringsAsFactors = FALSE)


library(tibble)
data3 <- as_tibble(data3)



data3

view(data3)

library(tidyverse)
url <- "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt"
data3 <- read.delim(url,
                    sep = ";",
                    skip = 2,
                    na.strings = c("?", "Not Available"),
                    strip.white = TRUE,
                    stringsAsFactors = FALSE)

data3 <- data3 %>%
  mutate(across(everything(), ~ gsub("/", "", .)))

data3 <- as_tibble(data3)

data3
view(data3)


```

## 1.4 Import https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset4.txt into R. Watch out for comments, units, and decimal marks (which are , in this case)

```{r}

data <- read_lines("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset4.txt")

data <- data[!str_detect(data, "This is a comment")]

data <- read_table2(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset4.txt",
  comment = "This is a comment",
  col_names = c("Name", "Weight", "Price")
)

data_clean <- data %>%
  mutate(
    Weight = as.numeric(str_replace(Weight, "kg", "")),
    Price = as.numeric(str_replace(str_replace(Price, "€", ""), ",", "."))
  )

data_clean


```

## 1.5 Import https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset5.txt into R. Parse the columns properly. As a reminder, you can read about parsing date and time data here. Write this imported and parsed data frame into a new csv file named dataset5_new.csv in your problem_sets folder.

```{r}

library(tidyverse)
library(lubridate)

library(tidyverse)
library(lubridate)

lines <- read_lines("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset5.txt")

data5 <- lines[-1] %>%  # remove header line
  str_remove_all('"') %>%   # remove all quotes
  str_split_fixed("\t", 3) %>%  # split into 3 columns
  as_tibble()   


colnames(data5) <- c("Name", "Expiration_Date", "Time")




data5



```



# Exercise 2. Weather station

## 2.1 Variable descriptions

```{r}
url <- "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt"

lines <- readLines(url)
 
read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt", delim = "-")

weather <- read_delim(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt",
  delim = "-",
  col_names = c("Variable", "Description", "Unit"),
  trim_ws = TRUE
)



```

## 2.2 Data tidying

```{r}

library(readr) #install.packages("readr")
library(tidyverse)
library(lubridate)

weather_Taiwan <- read_csv(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv",
  col_names = TRUE,
  col_types = cols(.default = "c")
)

weather_Taiwan
head(weather_Taiwan, 10)


weather_Taiwan_cleaned <- weather_Taiwan |>
  pivot_longer(cols= '00':'23', names_to= "hour", values_to= "value") |>
  pivot_wider(names_from = item, values_from = value) |>
  mutate(RAINFALL = ifelse(RAINFALL == "NR", "0", RAINFALL)) |>
  mutate(date = as.Date(date),
         across(AMB_TEMP:PM10, as.numeric),
         hour = hms :: as_hms(paste0(hour, ":00:00")))

weather_Taiwan_cleaned |>
  select(1:10) |>
  head()

```

## 2.3 Using this cleaned dataset, plot the daily variation in ambient temperature on September 25, 2015, as shown below.

```{r}

weather_Taiwan_cleaned |>
  filter(date == "2015-09-25") |>
  ggplot(aes(x = hour, y=AMB_TEMP)) + geom_line()


```

## 2.4 Plot the daily average ambient temperature throughout the year with a continuous line, as shown below.

```{r}

weather_Taiwan_cleaned |> 
  group_by(date) |>
  summarize(daily_average_ambient_temp= mean(AMB_TEMP)) |>
  ggplot(aes(x=date, y=daily_average_ambient_temp)) + geom_line()

  

```

## 2.5 Plot the total rainfall per month in a bar chart, as shown below.

```{r}

weather_Taiwan_cleaned |> 
  mutate(year = format(date, "%Y"), month = format(date, "%m"), day = format(date, "%d"), RAINFALL = as.numeric(RAINFALL))|>
  group_by(month) |>
  summarise(MonthlyRainfall = sum(RAINFALL, na.rm = TRUE)) |>
  ggplot(aes(x=month, y=MonthlyRainfall)) + geom_col()
                
```

##2.6 Plot the per hour variation in PM2.5 in the first week of September with a continuous line, as shown below.


```{r}
weather_Taiwan_cleaned |> 
  filter(format(date, "%m") == "09", format(date, "%d") <= "07") |> 
  mutate(time_str = paste(date, hour), PM2.5 = as.numeric(PM2.5)) |> 
  mutate(time = parse_datetime(time_str, format = "%Y-%m-%d %H:%M:%S")) |> 
  ggplot(aes(x = time, y = PM2.5)) +
  geom_line()
```

